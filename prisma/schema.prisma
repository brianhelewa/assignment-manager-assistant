
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Project {
  id        String   @id @default(cuid())
  userId    String
  name      String
  topics    Topic[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Topic {
  id        String   @id @default(cuid())
  projectId String
  name      String
  color     String   @default("#60a5fa")
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
  id                String   @id @default(cuid())
  topicId           String
  title             String
  description       String?
  status            String   @default("inbox")
  startAt           DateTime?
  dueAt             DateTime?
  estimateMin       Int?
  importanceWeight  Float?
  goalContribution  Float?
  habitFit          Float?
  priorityCached    Float?
  edgesFrom         Edge[]   @relation("from")
  edgesTo           Edge[]   @relation("to")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  topic             Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Edge {
  id      String @id @default(cuid())
  fromId  String
  toId    String
  type    String
  from    Task   @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
  to      Task   @relation("to", fields: [toId], references: [id], onDelete: Cascade)
}
